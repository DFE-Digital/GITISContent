function uploadAssets() {
  var drives = Drive.Drives.list({ "q": "name contains 'GITISContent'" });
  drives.items.map(drive => {
    Logger.log(`${drive.name} - ${drive.id}`);
    var folder = DriveApp.getFolderById(drive.id);
    var folders = folder.getFolders();
    while (folders.hasNext()) {
      var folder = folders.next();
      Logger.log(`Folder getName: ${folder.getName()} - getId: ${folder.getId()}`);
      uploadImagesToAzureStorage(folder.getName(), folder.getId());
    }
  });
}

function uploadImagesToAzureStorage(imagesSubFolder, imagesFolderId) {
  let imagesFolder = DriveApp.getFolderById(imagesFolderId);
  let dateNow = new Date();
  let formattedDate = dateNow.toISOString();
  let dateYesterday = new Date(dateNow.setDate(dateNow.getDate() - 1));
  let formattedDateYesterday = dateYesterday.toISOString();
  Logger.log(`formattedDate: ${formattedDate} -  formattedDateYesterday: ${formattedDateYesterday}`);
  let searchQuery = `modifiedDate > '${formattedDateYesterday}'`;
  Logger.log(`Search for files where: ${searchQuery}`);

  let files = imagesFolder.searchFiles(`${searchQuery}`);
  while (files.hasNext()) {
    let file = files.next();
    Logger.log(`File getName: ${file.getName()} - getId: ${file.getId()} - getUrl: ${file.getUrl()}`);
    Logger.log(`File getLastUpdated: ${file.getLastUpdated()}`);
    let age = dateNow - file.getLastUpdated();
    let newage = dateNow - 3600;
    Logger.log(`Now: ${dateNow}, file getLastUpdated: ${file.getLastUpdated()}, age: ${age}, newage: ${newage}`)
    let blob = file.getBlob();
    let contentType = blob.getContentType();
    let options = {
      'method': 'PUT',
      'payload': blob.getAs(contentType),
      contentType: contentType,
      headers: {
        'x-ms-blob-cache-control': 'public, max-age=3600',
        'x-ms-version': '2020-02-10',
        'x-ms-date': (new Date()).toUTCString(),
        'Content-Type': contentType,
        'x-ms-blob-content-type': contentType,
        'x-ms-blob-type': 'BlockBlob'
      }
    };
    let azureStorageUrl = `https://<%= ENV.fetch('STORAGE_NAME') %>.blob.core.windows.net/content/${imagesSubFolder}/${file.getName()}?<%= ENV.fetch('SAS') %>`
    let response = UrlFetchApp.fetch(azureStorageUrl, options);
    Logger.log(response.getContentText());
  }
}
